{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAaC,SAASC,cAAc,kBACpCC,EAAYF,SAASC,cAAc,iBACnCE,EAAcH,SAASC,cAAc,mBAG3C,SAASG,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAZMN,SAASC,cAAc,SAgB/Ba,iBAAiB,UAAU,SAAAC,GAC9BA,EAAMC,iBACN,IAAIC,EAAeC,OAAOnB,EAAWoB,OACjCC,EAAYF,OAAOhB,EAAUiB,OAC7BE,EAAmBH,OAAOf,EAAYgB,OAE1C,GAAIF,EAAe,GAAKG,EAAY,GAAKC,EAAmB,EAC1DC,EAAAzB,GAAS0B,OAAOC,QAAS,yCAEvB,IAAG,IAAIC,EAAI,EAAGA,EAAIJ,EAAkBI,IAAK,CAGzCrB,EAFeqB,EAAI,EACPR,EAAeG,EAAYK,GAEpCC,MAAK,SAAAC,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MACjBgB,EAAAzB,GAAS0B,OAAOK,QACd,uBAAwCC,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M,IAGjDwB,OAAM,SAAAH,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MAClBgB,EAAAzB,GAAS0B,OAAOQ,QACd,sBAAqCF,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M,IAMrDS,EAAMiB,cAAcC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst delayInput = document.querySelector('[name=\"delay\"]');\nconst stepInput = document.querySelector('[name=\"step\"]');\nconst amountInput = document.querySelector('[name=\"amount\"]');\nconst form = document.querySelector('.form');\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nform.addEventListener('submit', event => {\n  event.preventDefault();\n  let promiseDelay = Number(delayInput.value);\n  let delayStep = Number(stepInput.value);\n  let amountOfPrimises = Number(amountInput.value);\n\n  if (promiseDelay < 0 || delayStep < 0 || amountOfPrimises < 0) {\n    Notiflix.Notify.warning(`❗ Please enter a positive number`);\n  } else {\n    for (let i = 0; i < amountOfPrimises; i++) {\n      let position = i + 1;\n      let delay = promiseDelay + delayStep * i;\n      createPromise(position, delay)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          );\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          );\n        });\n    }\n  }\n\n  event.currentTarget.reset();\n});\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$delayInput","document","querySelector","$ce04d3a99e08e73b$var$stepInput","$ce04d3a99e08e73b$var$amountInput","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","promiseDelay","Number","value","delayStep","amountOfPrimises","$parcel$interopDefault","Notify","warning","i","then","param","success","concat","catch","failure","currentTarget","reset"],"version":3,"file":"03-promises.3517279c.js.map"}