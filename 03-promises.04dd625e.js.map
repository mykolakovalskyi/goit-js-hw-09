{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAaC,SAASC,cAAc,kBACpCC,EAAYF,SAASC,cAAc,iBACnCE,EAAcH,SAASC,cAAc,mBAG3C,SAASG,EAAcC,EAAUC,GACTC,KAAKC,SAAW,GAEpCC,YAAW,WACT,OAAOC,QAAQC,QAAQ,CAAEN,WAAUC,S,GAClCA,GAEHG,YAAW,WACT,OAAOC,QAAQE,OAAO,CAAEP,WAAUC,S,GACjCA,E,CAXMN,SAASC,cAAc,SAe/BY,iBAAiB,UAAU,SAAAC,GAC9BA,EAAMC,iBACN,IAAIC,EAAeC,OAAOlB,EAAWmB,OACjCC,EAAYF,OAAOf,EAAUgB,OAC7BE,EAAmBH,OAAOd,EAAYe,OAE1C,GAAIF,EAAe,GAAKG,EAAY,GAAKC,EAAmB,EAC1DC,EAAAxB,GAASyB,OAAOC,QAAS,yCAEvB,IAAG,IAAIC,EAAI,EAAGA,EAAIJ,EAAkBI,IAAK,CAGzCpB,EAFeoB,EAAI,EACPR,EAAeG,EAAYK,GAEpCC,MAAK,SAAAC,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MACjBe,EAAAxB,GAASyB,OAAOK,QACd,uBAAwCC,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,M,IAGjDuB,OAAM,SAAAH,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MAClBe,EAAAxB,GAASyB,OAAOQ,QACd,sBAAqCF,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,M,IAMrDQ,EAAMiB,cAAcC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst delayInput = document.querySelector('[name=\"delay\"]');\nconst stepInput = document.querySelector('[name=\"step\"]');\nconst amountInput = document.querySelector('[name=\"amount\"]');\nconst form = document.querySelector('.form');\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    setTimeout(() => {\n      return Promise.resolve({ position, delay });\n    }, delay);\n  } else {\n    setTimeout(() => {\n      return Promise.reject({ position, delay });\n    }, delay);\n  }\n}\n\nform.addEventListener('submit', event => {\n  event.preventDefault();\n  let promiseDelay = Number(delayInput.value);\n  let delayStep = Number(stepInput.value);\n  let amountOfPrimises = Number(amountInput.value);\n\n  if (promiseDelay < 0 || delayStep < 0 || amountOfPrimises < 0) {\n    Notiflix.Notify.warning(`❗ Please enter a positive number`);\n  } else {\n    for (let i = 0; i < amountOfPrimises; i++) {\n      let position = i + 1;\n      let delay = promiseDelay + delayStep * i;\n      createPromise(position, delay)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          );\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          );\n        });\n    }\n  }\n\n  event.currentTarget.reset();\n});\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$delayInput","document","querySelector","$ce04d3a99e08e73b$var$stepInput","$ce04d3a99e08e73b$var$amountInput","$ce04d3a99e08e73b$var$createPromise","position","delay","Math","random","setTimeout","Promise","resolve","reject","addEventListener","event","preventDefault","promiseDelay","Number","value","delayStep","amountOfPrimises","$parcel$interopDefault","Notify","warning","i","then","param","success","concat","catch","failure","currentTarget","reset"],"version":3,"file":"03-promises.04dd625e.js.map"}